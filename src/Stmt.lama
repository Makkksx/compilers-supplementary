import State;
import Expr;
import World;


fun eval (c@[state, world], stmt) {
  case stmt of
    Skip                   -> c
  | Seq (stmt1, stmt2)     -> eval (eval (c, stmt1), stmt2)
  | Assn (variable, expr)  -> [state <- [variable, evalExpr (state, expr)], world]
  | Read (variable)        -> case readWorld (world) of
                                [value, newWorld] -> [state <- [variable, value], newWorld]
                              esac
  | Write (expr)           -> [state, writeWorld (evalExpr (state, expr), world)]
  esac
}

public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
